/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Mon May 26 22:00:40 2025


#ifndef MAP2D_NWS_ROS2_PARAMSPARSER_H
#define MAP2D_NWS_ROS2_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class Map2D_nws_ros2.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value         | Required | Description                                                 | Notes                                                                                             |
* |:----------:|:--------------:|:------:|:-----:|:---------------------:|:--------:|:-----------------------------------------------------------:|:-------------------------------------------------------------------------------------------------:|
* | -          | name           | string | -     | map2D_nws_ros2        | 0        | Device name prefix                                          | -                                                                                                 |
* | -          | getmap         | string | -     | getMap                | 0        | The \"GetMap\" ROS service name                             | For the moment being the service always responds with an empty map                                |
* | -          | getmapbyname   | string | -     | getMapByName          | 0        | The \"GetMapByName\" ROS2  custom service name              | The map returned by this service is also available via publisher named \"getmapbyname value\"/pub |
* | -          | roscmdparser   | string | -     | rosCmdParser          | 0        | The \"BasicTypes\" ROS service name                         | This is used to send commands to the nws via ros2 BasicTypes service                              |
* | -          | markers_pub    | string | -     | locationServerMarkers | 0        | The visual markers array publisher name                     | -                                                                                                 |
* | -          | node_name      | string | -     | map2D_nws_ros2        | 0        | The ROS2 node name. If absent, the device name will be used | -                                                                                                 |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device map2D_nws_ros2 --name map2D_nws_ros2 --getmap getMap --getmapbyname getMapByName --roscmdparser rosCmdParser --markers_pub locationServerMarkers --node_name map2D_nws_ros2
* \endcode
*
* \code{.unparsed}
* yarpdev --device map2D_nws_ros2
* \endcode
*
*/

class Map2D_nws_ros2_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    Map2D_nws_ros2_ParamsParser();
    ~Map2D_nws_ros2_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"Map2D_nws_ros2"};
    const std::string m_device_name = {"map2D_nws_ros2"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 2;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    std::string m_provided_configuration;

    const std::string m_name_defaultValue = {"map2D_nws_ros2"};
    const std::string m_getmap_defaultValue = {"getMap"};
    const std::string m_getmapbyname_defaultValue = {"getMapByName"};
    const std::string m_roscmdparser_defaultValue = {"rosCmdParser"};
    const std::string m_markers_pub_defaultValue = {"locationServerMarkers"};
    const std::string m_node_name_defaultValue = {"map2D_nws_ros2"};

    std::string m_name = {"map2D_nws_ros2"};
    std::string m_getmap = {"getMap"};
    std::string m_getmapbyname = {"getMapByName"};
    std::string m_roscmdparser = {"rosCmdParser"};
    std::string m_markers_pub = {"locationServerMarkers"};
    std::string m_node_name = {"map2D_nws_ros2"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
    bool getParamValue(const std::string& paramName, std::string& paramValue) const override;
    std::string   getConfiguration() const override;
};

#endif
