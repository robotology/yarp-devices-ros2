/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Mon May 26 22:00:40 2025


#include "Odometry2D_nws_ros2_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(Odometry2D_nws_ros2ParamsCOMPONENT, "yarp.device.Odometry2D_nws_ros2")
}


Odometry2D_nws_ros2_ParamsParser::Odometry2D_nws_ros2_ParamsParser()
{
}


std::vector<std::string> Odometry2D_nws_ros2_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("period");
    params.push_back("node_name");
    params.push_back("topic_name");
    params.push_back("odom_frame");
    params.push_back("base_frame");
    return params;
}


bool Odometry2D_nws_ros2_ParamsParser::getParamValue(const std::string& paramName, std::string& paramValue) const
{
    if (paramName =="period")
    {
        paramValue = std::to_string(m_period);
        return true;
    }
    if (paramName =="node_name")
    {
        paramValue = m_node_name;
        return true;
    }
    if (paramName =="topic_name")
    {
        paramValue = m_topic_name;
        return true;
    }
    if (paramName =="odom_frame")
    {
        paramValue = m_odom_frame;
        return true;
    }
    if (paramName =="base_frame")
    {
        paramValue = m_base_frame;
        return true;
    }

    yError() <<"parameter '" << paramName << "' was not found";
    return false;

}


std::string Odometry2D_nws_ros2_ParamsParser::getConfiguration() const
{
    //This is a sub-optimal solution.
    //Ideally getConfiguration() should return all parameters but it is currently
    //returning only user provided parameters (excluding default values)
    //This behaviour will be fixed in the near future.
    std::string s_cfg = m_provided_configuration;
    return s_cfg;
}

bool      Odometry2D_nws_ros2_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(Odometry2D_nws_ros2ParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    m_provided_configuration = config.toString();
    yarp::os::Property prop_check(m_provided_configuration.c_str());
    //Parser of parameter period
    {
        if (config.check("period"))
        {
            m_period = config.find("period").asFloat64();
            yCInfo(Odometry2D_nws_ros2ParamsCOMPONENT) << "Parameter 'period' using value:" << m_period;
        }
        else
        {
            yCInfo(Odometry2D_nws_ros2ParamsCOMPONENT) << "Parameter 'period' using DEFAULT value:" << m_period;
        }
        prop_check.unput("period");
    }

    //Parser of parameter node_name
    {
        if (config.check("node_name"))
        {
            m_node_name = config.find("node_name").asString();
            yCInfo(Odometry2D_nws_ros2ParamsCOMPONENT) << "Parameter 'node_name' using value:" << m_node_name;
        }
        else
        {
            yCError(Odometry2D_nws_ros2ParamsCOMPONENT) << "Mandatory parameter 'node_name' not found!";
            yCError(Odometry2D_nws_ros2ParamsCOMPONENT) << "Description of the parameter: name of the ros2 node";
            return false;
        }
        prop_check.unput("node_name");
    }

    //Parser of parameter topic_name
    {
        if (config.check("topic_name"))
        {
            m_topic_name = config.find("topic_name").asString();
            yCInfo(Odometry2D_nws_ros2ParamsCOMPONENT) << "Parameter 'topic_name' using value:" << m_topic_name;
        }
        else
        {
            yCError(Odometry2D_nws_ros2ParamsCOMPONENT) << "Mandatory parameter 'topic_name' not found!";
            yCError(Odometry2D_nws_ros2ParamsCOMPONENT) << "Description of the parameter: name of the topic where the device must publish the data";
            return false;
        }
        prop_check.unput("topic_name");
    }

    //Parser of parameter odom_frame
    {
        if (config.check("odom_frame"))
        {
            m_odom_frame = config.find("odom_frame").asString();
            yCInfo(Odometry2D_nws_ros2ParamsCOMPONENT) << "Parameter 'odom_frame' using value:" << m_odom_frame;
        }
        else
        {
            yCError(Odometry2D_nws_ros2ParamsCOMPONENT) << "Mandatory parameter 'odom_frame' not found!";
            yCError(Odometry2D_nws_ros2ParamsCOMPONENT) << "Description of the parameter: name of the reference frame for odometry";
            return false;
        }
        prop_check.unput("odom_frame");
    }

    //Parser of parameter base_frame
    {
        if (config.check("base_frame"))
        {
            m_base_frame = config.find("base_frame").asString();
            yCInfo(Odometry2D_nws_ros2ParamsCOMPONENT) << "Parameter 'base_frame' using value:" << m_base_frame;
        }
        else
        {
            yCError(Odometry2D_nws_ros2ParamsCOMPONENT) << "Mandatory parameter 'base_frame' not found!";
            yCError(Odometry2D_nws_ros2ParamsCOMPONENT) << "Description of the parameter: name of the base frame for odometry";
            return false;
        }
        prop_check.unput("base_frame");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(Odometry2D_nws_ros2ParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(Odometry2D_nws_ros2ParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      Odometry2D_nws_ros2_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: Odometry2D_nws_ros2\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'period': refresh period of the broadcasted values in s\n");
    doc = doc + std::string("'node_name': name of the ros2 node\n");
    doc = doc + std::string("'topic_name': name of the topic where the device must publish the data\n");
    doc = doc + std::string("'odom_frame': name of the reference frame for odometry\n");
    doc = doc + std::string("'base_frame': name of the base frame for odometry\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device odometry2D_nws_ros2 --period 0.02 --node_name <mandatory_value> --topic_name <mandatory_value> --odom_frame <mandatory_value> --base_frame <mandatory_value>\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device odometry2D_nws_ros2 --node_name <mandatory_value> --topic_name <mandatory_value> --odom_frame <mandatory_value> --base_frame <mandatory_value>\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
