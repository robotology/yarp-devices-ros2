name: CI Workflow

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:

  check-style:
    name: 'Check Style'
    runs-on: ubuntu-20.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check Style
      run: |
        perl tests/misc/check_style.pl

  check-license:
    name: 'Check License'
    runs-on: ubuntu-20.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check License
      run: |
        perl tests/misc/check_license.pl

  check-tests:
    name: 'Check Devices Tests'
    runs-on: ubuntu-20.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y python3
    - name: Check Devices Tests
      run: |
        python3 tests/misc/check_tests.py

  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@${{ matrix.ros_distro }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        ros_distro: [humble, jazzy]
        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-2019]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        conda install cmake compilers make ninja pkg-config
        # Actual dependencies
        conda install -c conda-forge -c robostack-${{ matrix.ros_distro }} ycm-cmake-modules eigen ace ros-${{ matrix.ros_distro }}-ros-base ros-${{ matrix.ros_distro }}-test-msgs


    - name: Download YARP [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone -b master https://github.com/robotology/yarp

    - name: Dependencies from source [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd yarp
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON \
                      -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/share/yarp::${YARP_DATA_DIRS}" >> $GITHUB_ENV

    - name: Dependencies from source [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone -b master https://github.com/robotology/yarp
        cd yarp
        mkdir build
        cd build
        cmake -G"Visual Studio 16 2019" -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/Library \
                                        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} .. \
                                        -DYARP_COMPILE_TESTS:BOOL=ON \
                                        -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/Library/share/yarp;${YARP_DATA_DIRS}" >> $GITHUB_ENV

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        # Python3_EXECUTABLE is set as a workaround for https://github.com/ros2/python_cmake_module/issues/6
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
                      -DYARP_ROS2_USE_SYSTEM_map2d_nws_ros2_msgs:BOOL=OFF \
                      -DPython3_EXECUTABLE:PATH=$CONDA_PREFIX/bin/python3 \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Configure [Windows]
      if: contains(matrix.os, 'windows')
      # Command prompt is used as a workaround for https://github.com/RoboStack/ros-noetic/issues/21
      shell: cmd /C CALL {0}
      run: |
        mkdir -p build
        cd build
        cmake -G"Visual Studio 16 2019" -DBUILD_TESTING:BOOL=ON ^
                                        -DYARP_ROS2_USE_SYSTEM_map2d_nws_ros2_msgs:BOOL=OFF ^
                                        -DPython3_EXECUTABLE:PATH=%CONDA_PREFIX%\python.exe ^
                                        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ^
                                        -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}\Library .. ^
                                        -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Build [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}

    - name: Test [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

    - name: Build [Windows]
      if: contains(matrix.os, 'windows')
      shell: cmd /C CALL {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Windows]
      if: contains(matrix.os, 'windows')
      shell: cmd /C CALL {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}

    - name: Test [Windows]
      if: contains(matrix.os, 'windows')
      shell: cmd /C CALL {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

  build-valgrind:
    name: 'valgrind [ubuntu-22.04@Debug@humble@conda]'
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        build_type: [Debug]
        ros_distro: [humble]
        os: [ubuntu-22.04]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        conda install cmake compilers make ninja pkg-config
        # Actual dependencies
        sudo apt-get install -qq -y libc6-dbg
        conda install -c conda-forge -c robostack-${{ matrix.ros_distro }} ycm-cmake-modules eigen valgrind ace ros-${{ matrix.ros_distro }}-ros-base ros-${{ matrix.ros_distro }}-test-msgs

    - name: Download YARP [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone -b master https://github.com/robotology/yarp

    - name: Dependencies from source [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd yarp
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON \
                      -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON \
                      -DYARP_VALGRIND_TESTS:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/share/yarp::${YARP_DATA_DIRS}" >> $GITHUB_ENV

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        # Python3_EXECUTABLE is set as a workaround for https://github.com/ros2/python_cmake_module/issues/6
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
                      -DYARP_ROS2_USE_SYSTEM_map2d_nws_ros2_msgs:BOOL=OFF \
                      -DPython3_EXECUTABLE:PATH=$CONDA_PREFIX/bin/python3 \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DYARP_VALGRIND_TESTS:BOOL=ON \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Build [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}

    - name: Test [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
